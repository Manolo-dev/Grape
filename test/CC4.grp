-- 1

sont_chiffres_decroissants <- [ Int ] := n => {n < 10
    | 1 => n
    | n % 10 <= (n // 10) % 10 and sont_chiffres_decroissants (n // 10)
    }

sont_chiffres_decroissants 10 -- 1
sont_chiffres_decroissants 12 -- 0
sont_chiffres_decroissants 221 -- 1

-- 2

etendue <- [ List Int ] := xs => (
    mn = xs::0
    mx = xs::0
    for x in xs (
        if x < mn
            mn = w
        if x > mx
            mx = w
    )

    mx - mn
)

etendue [ 30 20 10 20 30 40] -- 30

etendue_sans_invalides <- [ List Int ] := xs => (
    mx = xs::0
    for x in xs (
        if x > mn and x < 60
            mn = w
    )

    mn = mx
    for x in xs (
        if x < mn
            mn = w
    )

    mx - mn
)

etendue_sans_invalides [ 30 20 10 1024 20 30 40 99 ] -- 30

-- 3

ecreter_invalides <- [ Tuple [ Int ( List Any or None ) ( List Any or None ) ] ] := tuple => (
    if abs tuple::0 >= 100
        tuple::0 = 0
    tuple::1 = ecreter_invalides tuple::1
    tuple::2 = ecreter_invalides tuple::2
    tuple
)

ecreter_invalides [ ] -- [ ]
ecreter_invalides [ 408 [ 5 ] [ -123 ] ] -- [ 0 [ 5 ] [ 0 ] ]

-- 4

partitionner_pairs_impairs <- [ Tuple [ Int ( List Any or None ) ] ] := tuple => (
    if tuple == None
        ret = [ [ ] [ ] ]
    else
        ret = partitionner_pairs_impairs tuple::1
        if tuple::0 % 2 == 0
            ret::0 = [ tuple::0 ret::0 ]
        else
            ret::1 = [ tuple::0 ret::1 ]
    
    ret
)

partitionner_pairs_impairs [ ] -- [ [ ] [ ] ]
partitionner_pairs_impairs [ 8 [ 17 [ 10 [ 9 None ] ] ] ] -- [ [ 8 [ 10 None] ] [ 17 [ 9 None ] ] ]